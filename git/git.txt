cd
mkdir
pwd

touch he.txt

git init

git add			(use "git add <file>..." to update what will be committed)
git commit -m ""	引号内添加修改注释，便于查看具体改动了哪些内容
			ps:add和commit的区别在于，add可以添加多次不同的文件到仓库，而commit可以一次提交多个文件到仓库。add为提交前的准备工作。

git status		git status命令可以让我们时刻掌握仓库当前的状态
git diff		如果git status告诉你有文件被修改过，用git diff可以查看修改内容
git log 		查看历史记录，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
			git的版本号是SHA1计算出的很大的十六进制数，用于区别不同的版本
			每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线
git reset -hard HEAD^	版本回溯，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
cat he.txt		查看内容
git reflog		在Git中，总是有后悔药可以吃的。
			当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，
			就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令

git reset --hard commit_id	

工作区:在电脑磁盘创建的文件夹，在这个文件夹内git init，那么这就是我们的工作区

版本库：
	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
	git add把文件添加进去，实际上就是把文件修改添加到暂存区
	git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支
	因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改
	可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改
	如果一个文件的状态是Untracked，那么该文件还未被add到git暂存区
	然后，执行git commit就可以一次性把暂存区的所有修改提交到分支，暂存区的东西一经提交，则将变为空

git的优秀之处：为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件

git restore 			放弃工作目录中的更改，在add前可以操作,
				
git restore --staged 文件名 	如果add以后那么可以使用staged参数进行操作，然后重复执行git restore即可
git reset --hard 版本号		当你已经将修改了的内容提交到分支以后，回溯以前的版本

当涉及到删除的改动时，如果确实想删除，那么git rm 久可以删除，但删除了文件还是要commit到版本库中
git rm				用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容
				只要被删除的版本已经提交过分支了，那么误删都可以恢复
				注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！


git的强大之处：远程仓库，分布式版本控制系统（同一个仓库可以分布到不同的机器上）
	       一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下	
	       本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
		1.创建SSH
		$ ssh-keygen -t rsa -C "youremail@example.com"
		密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa
		用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息
		输入完毕后程序同时要求输入一个字符串(passphrase)，该字符串为保存SSHkey代码的文件的文件名，推荐默认。接着会让输入2次口令(password)，空表示没有口令，口令为push文件时需要输入的密码。3次回车即可完成当前步骤，此时[c盘>用户>自己的用户名>.ssh]目录下已经生成好了。
		登录github。打开setting->SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中，再为当前的key起一个title来区分每个key。
		使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码
		用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人

		登陆GitHub，打开“Account settings”，“SSH Keys”页面
		点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
		为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
		GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了
		github代码托管平台默认是公开的，私有的话别人无法提交。不过私有的库需要收费
		“如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。”
		你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得

		注意：在GitHub创建远程仓库需要是空的，否则push不上去。
	
		添加远程仓库：（添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库）
		关联远程仓库：
			$ git remote add origin git@github.com:michaelliao/learngit.git	
		把本地仓库推送到远程仓库（用git push命令，实际上是把当前分支master推送到远程）：
			$ git push -u origin master	由于远程库是空的，我们第一次推送master分支时，加上了-u参数
							Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
		从现在起，只要本地作了提交，就可以通过命令：
		$ git push origin master
		把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

		SSH警告：
			当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
			The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
			RSA key fingerprint is xx.xx.xx.xx.xx.
			Are you sure you want to continue connecting (yes/no)?	
			这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

			Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

			Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
			这个警告只会出现一次，后面的操作就不会有任何警告了。	

用命令git clone克隆一个本地库：
		$ git clone git@github.com:michaelliao/gitskills.git
		GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。		
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。支持多种协议，包括https，但通过ssh支持的原生git协议速度最快	

git分支管理：
	可以创建自己地分支别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作
	HEAD指向当前分支
	创建分支并切换分支（HEAD指向新创建的分支dev）：
		git checkout -b dev	
		等同于
		git branch dev
		git checkout dev
	查看当前分支：
		git branch	git branch命令会列出所有分支，当前分支前面会标一个*号
	然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行，完成后add
	现在，dev分支的工作完成，我们就可以切换回master分支(HEAD自动指向当前分支):
		git checkout master
	但是在合并到主分支master之前，在dev分支所做的修改不会影响主分支
	现在，我们把dev分支的工作成果合并到master分支上：
		git merge dev		将master指向dev所做的文件上	
	Git鼓励大量使用分支：

			查看分支：git branch

			创建分支：git branch <name>

			切换分支：git checkout <name>或者git switch <name>

			创建+切换分支：git checkout -b <name>或者git switch -c <name>

			合并某分支到当前分支：git merge <name>

			删除分支：git branch -d <name>
		注意：如果master分支和feature1分支各自都分别有新的提交，这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突

			$ git merge feature1
			Auto-merging readme.txt
			CONFLICT (content): Merge conflict in readme.txt
			Automatic merge failed; fix conflicts and then commit the result.
			
			Git告诉我们，he.txt文件存在冲突，必须手动解决冲突后再提交
		解决冲突：
			修改master对应文件，add和commit后即可	
			当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
			解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
			用git log --graph命令可以看到分支合并图。

分支管理策略：
		通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
		如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
		所以就用，--no-ff方式的git merge

		$ git merge --no-ff -m "merge with no-ff" dev

		这次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
		使用该模式最大的特点就是在merge分支后，仍然能保留分支的信息

分支策略:
		在实际开发中，我们应该按照几个基本原则进行分支管理：

		首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
		晚上

		那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

		你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
		
		注意：合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

BUG分支：
		在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除
		当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交
		并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

		幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
		$ git stash
		注意：想修复主分支的bug，就需要在主分支上创建分支，需要将checkout回主分支，再创建bug修复分支，修复完了再合并的主分支
		修复完毕了以后，这时就可以切换回刚刚还没完成的工作分支dev：
		$ git checkout dev
		用git stash list命令看看：
		$ git stash list
		stash@{0}: WIP on dev: f52c633 add merge	
		工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
		另一种方式是用git stash pop，恢复的同时把stash内容也删了，删除后：
		再用git stash list查看，就看不到任何stash内容了：
		$ git stash list
		但是，想一想dev也是主分支的分支，那么主分支的bug也会出现在当前的dev分支上，主分支的bug修复了，但是dev上的还没
		那么，有什么办法使得dev的bug也能被修复了，难道还要在dev上建立一个分支吗？
		答案是：不用那么麻烦
		将之前修复主分支的那次提交修改“复制”到dev。
		注意：我们只想复制4c805e2 fix bug 101这个提交所做的修改，并不是把整个master分支merge过来。
		为了方便操作，Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支：
		$ git branch
		* dev
 		 master
		$ git cherry-pick 4c805e2
		[master 1d4b803] fix bug 101
		 1 file changed, 1 insertion(+), 1 deletion(-)
		Git自动给dev分支做了一次提交，注意这次提交的commit是1d4b803，它并不同于master的4c805e2，因为这两个commit只是改动相同，但确实是两个不同的commit

		小结
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
	
		在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复性劳动（fiexed）。

git 分支：
		软件开发中，总有无穷无尽的新的功能要不断添加进来。

		添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
		
		$ git branch -d feature-vulcan
		error: The branch 'feature-vulcan' is not fully merged.
		If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
		销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。。
多人协作：
		要查看远程库的信息，用git remote：

			$ git remote
			origin
		或者，用git remote -v显示更详细的信息：
			$ git remote -v
			origin  git@github.com:michaelliao/learngit.git (fetch)
			origin  git@github.com:michaelliao/learngit.git (push)		
		推送分支：
			就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
				$ git push origin master
			如果要推送其他分支，比如dev，就改成：
				$ git push origin dev
		但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
			master分支是主分支，因此要时刻与远程同步；

			dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

			bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

			feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

			总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
		抓取分支:
				$ git clone git@github.com:michaelliao/learngit.git
			你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：
				$ git branch
				* master	
			现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
				$ git checkout -b dev origin/dev
			现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
				$git add env.txt
				$ git commit -m "add env"
				$ git push origin dev
			你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
				$git add env.txt
				$ git commit -m "add env"
				$ git push origin dev
				To github.com:michaelliao/learngit.git
				 ! [rejected]        dev -> dev (non-fast-forward)
				error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
				hint: Updates were rejected because the tip of your current branch is behind
				hint: its remote counterpart. Integrate the remote changes (e.g.
				hint: 'git pull ...') before pushing again.
				hint: See the 'Note about fast-forwards' in 'git push --help' for details.
			推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
				$ git pull
				There is no tracking information for the current branch.
				Please specify which branch you want to merge with.
				See git-pull(1) for details.
   				git pull <remote> <branch>
				If you wish to set tracking information for this branch you can do so with:
   				git branch --set-upstream-to=origin/<branch> dev
			git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
				$ git branch --set-upstream-to=origin/dev dev
				Branch 'dev' set up to track remote branch 'dev' from 'origin'
			再pull：
				$ git pull
				Auto-merging env.txt
				CONFLICT (add/add): Merge conflict in env.txt
				Automatic merge failed; fix conflicts and then commit the result.
			这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
	
			因此，多人协作的工作模式通常是这样：

				首先，可以试图用git push origin <branch-name>推送自己的修改；
	
				如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

				如果合并有冲突，则解决冲突，并在本地提交；

				没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

				如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

				这就是多人协作的工作模式，一旦熟悉了，就非常简单。
	
			小结:
				查看远程库信息，使用git remote -v；

				本地新建的分支如果不推送到远程，对其他人就是不可见的；

				从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

				在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

				建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

				从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
				还有一点：
				git pull之后，需要git rebase以下，保证本地的分支成一条直线，再push到远端时会更好查看

				小结
				rebase操作可以把本地未push的分叉提交历史整理成直线；

				rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
标签管理：
			发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本
			每一个标签对应着每一个历史版本
			标签的本质：它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）
			Git有commit，为什么还要引入tag？	
			“请把上周一的那个版本打包发布，commit号是6a5819e...”

			“一串乱七八糟的数字不好找！”

			如果换一个办法：

			“请把上周一的那个版本打包发布，版本号是v1.2”

			“好的，按照tag v1.2查找commit就行！”
			所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
			
		创建标签：
			首先，切换到需要打标签的分支上：
			然后，敲命令git tag <name>就可以打一个新标签：
			$ git tag v1.0		可以用命令git tag查看所有标签
			默认标签是打在最新提交的commit上的
			有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
			方法是找到历史提交的commit id，然后打上就可以了：
			比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：
			$ git tag v0.9 f52c633
			注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息
			用命令git show <tagname>可以看到说明文字
			注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。
			还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
			$ git tag -a v0.1 -m "version 0.1 released" 1094adb
			$ git show v0.1			可以看到说明文字
			
			小结
			命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

			命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

			命令git tag可以查看所有标签。
			如果标签打错了，也可以删除：
			$ git tag -d v0.1
			Deleted tag 'v0.1' (was f15b0dd)
			因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
			如果要推送某个标签到远程，使用命令git push origin <tagname>：
			$ git push origin v1.0
			或者，一次性推送全部尚未推送到远程的本地标签：
			$ git push origin --tags
			如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
			$ git tag -d v0.9
			然后，从远程删除。删除命令也是push，但是格式如下：
			$ git push origin :refs/tags/v0.9
			要看看是否真的从远程库删除了标签，可以登陆GitHub查看。
			小结
			命令git push origin <tagname>可以推送一个本地标签；

			命令git push origin --tags可以推送全部未推送过的本地标签；

			命令git tag -d <tagname>可以删除一个本地标签；

			命令git push origin :refs/tags/<tagname>可以删除一个远程标签
			
使用github：
			如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：

			git clone git@github.com:michaelliao/bootstrap.git
		
			一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。			
			
			如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。
			小结
			在GitHub上，可以任意Fork开源仓库；

			自己拥有Fork后的仓库的读写权限；

			可以推送pull request给官方仓库来贡献代码。
自定义git：	
			比如，让Git显示颜色，会让命令输出看起来更醒目：

			$ git config --global color.ui true

			忽略特殊文件：
				有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...
				解决办法：在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件

				忽略文件的原则是：
   				 忽略操作系统自动生成的文件，比如缩略图等；
    				 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
    				 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
			一个完整的.gitignore文件：
				# Windows:
				Thumbs.db
				ehthumbs.db
				Desktop.ini

				# Python:
				*.py[cod]
				*.so
				*.egg
				*.egg-info
				dist
				build

				# My configurations:
				db.ini
				deploy_key_rsa
			最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean

			有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：
			
				$ git add App.class
				The following paths are ignored by one of your .gitignore files:
				App.class
				Use -f if you really want to add them.
			如果你确实想添加该文件，可以用-f强制添加到Git：
				$ git add -f App.class
			或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
				$ git check-ignore -v App.class
				.gitignore:3:*.class	App.class
			Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。	
	
			小结

	    		        忽略某些文件时，需要编写.gitignore；
	
    				.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


配置别名:
			有没有经常敲错命令？比如git status？status这个单词真心不好记。
			如果敲git st就表示git status那就简单多了
			我们只需要敲一行命令，告诉Git，以后st就表示status：

				$ git config --global alias.st status
			当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：

				$ git config --global alias.co checkout
				$ git config --global alias.ci commit
				$ git config --global alias.br branch
			-global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

			在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：

				$ git config --global alias.unstage 'reset HEAD'

			当你敲入命令：

				$ git unstage test.py

			实际上Git执行的是：

				$ git reset HEAD test.py

			甚至还有人丧心病狂地把lg配置成了：

				git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
			
			配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
			
			配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
				$ cat .git/config 
				[core]
				    repositoryformatversion = 0
				    filemode = true
				    bare = false
				    logallrefupdates = true
				    ignorecase = true
				    precomposeunicode = true
				[remote "origin"]
				    url = git@github.com:michaelliao/learngit.git
				    fetch = +refs/heads/*:refs/remotes/origin/*
				[branch "master"]
				    remote = origin
				    merge = refs/heads/master
				[alias]
				    last = log -1
			别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
			而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

				$ cat .gitconfig
				[alias]
 				   co = checkout
 				   ci = commit
				    br = branch
				    st = status
				[user]
				    name = Your Name
				    email = your@email.com
			配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。

搭建个人git服务器：
		
			搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装

			假设你已经有sudo权限的用户账号，下面，正式开始安装。

			第一步，安装git：

				$ sudo apt-get install git
			第二步，创建一个git用户，用来运行git服务：

				$ sudo adduser git
			第三步，创建证书登录：

			收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

			第四步，初始化Git仓库：

			先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

				$ sudo git init --bare sample.git
			Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

				$ sudo chown -R git:git sample.git
			第五步，禁用shell登录：

			出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

				git:x:1001:1001:,,,:/home/git:/bin/bash

			改为：

				git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

			这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。	
			第六步，克隆远程仓库：

			现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

				$ git clone git@server:/srv/sample.git
				Cloning into 'sample'...
				warning: You appear to have cloned an empty repository.

			剩下的推送就简单了。
	
			管理公钥

				如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
	
				这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大
			管理权限

				有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。

				这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

			小结

    				搭建Git服务器非常简单，通常10分钟即可完成；

    				要方便管理公钥，用Gitosis；

   				 要像SVN那样变态地控制权限，用Gitolite。
			

		补充：从git上克隆部分文件到本地，使用Sparse Checkout模式
				$mkdir project_folder
				$cd project_folder
				$git init
				$git remote add -f origin <url>		
				接下来，我们在Config中允许使用Sparse Checkout模式：
				$git config core.sparsecheckout true
				接下来你需要告诉Git哪些文件或者文件夹是你真正想Check Out的，你可以将它们作为一个列表保存在.git/info/sparse-checkout文件中。 
				例如：
					$echo “libs” >> .git/info/sparse-checkout
					$echo “apps/register.go” >> .git/info/sparse-checkout
					$echo “resource/css” >> .git/info/sparse-checkout
				最后，你只要以正常方式从你想要的分支中将你的项目拉下来就可以了：
					$git pull origin master




















			









	
